server {
    listen       80 default_server;
    server_name  _;  # 匹配所有未指定域名的请求

    #  ===== 缓存清理端点 =====
    # Allow local cache purge over HTTP
    location ~ /cloudchat/purge-cache/(.*) {
        allow 127.0.0.1;
        deny all;

        # 只允许PURGE方法
        if ($request_method != "PURGE") {
            return 405;
        }

        # 增强调试信息
        add_header X-Purge-Key "$1" always;
        add_header X-Cache-Zone "cloudchat_cache" always;
        add_header X-Cache-Path "/var/cache/nginx" always;

        proxy_cache_purge cloudchat_cache $1;

        # 成功清除 (204) 或 未找到缓存 (404)
        error_page 404 = @purge_not_found;
        # 默认响应
        return 200 "✅ Cache purged successfully for key: $arg_purge_key\nCache zone: cloudchat_cache\nTime: $time_local";
    }

    # 缓存未找到的自定义响应
    location @purge_not_found {
        add_header Content-Type text/plain;
        return 404 "⚠️ Cache key not found: $arg_purge_key\nNote: This may mean the key was already purged or never cached";
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server
server {
    listen       443 ssl http2;
    server_name  www.rendazhang.com rendazhang.com;

    # ====== ① 站点根路径（所有静态文件基准）======
    root   /var/www/rendazhang;          # ← 绝对路径
    index  index.html index.htm;

    # 安全头
    add_header Strict-Transport-Security "max-age=63072000" always;
    # ===== Content-Security-Policy =====
    add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:; script-src 'self' https://cdn.credly.com https://fonts.googleapis.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src https://www.credly.com; object-src 'self'; media-src 'self'; connect-src 'self';" always;

    # ===== 缓存状态头（调试用）=====
    add_header X-Cache-Status $upstream_cache_status;
    ssl_certificate /etc/letsencrypt/live/rendazhang.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/rendazhang.com/privkey.pem; # managed by Certbot

    ssl_session_timeout  1d;
    ssl_session_cache shared:SSL:10m;

    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384';
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers  on;

    location /cloudchat/ {
        if ($http_referer !~* ^https://(www\.)?(rendazhang\.com|rendazhang\.github\.io)) {
            return 403;
        }

        # zone 需要跟 limit_req_zone 中的名称一致
        limit_req zone=flask_limit burst=10 nodelay;  # 应用限流 - 503

        # ========== 动态内容缓存配置 ==========
        proxy_cache cloudchat_cache;
        proxy_cache_valid 200 302 10m;   # 成功响应缓存10分钟
        proxy_cache_valid 404      1m;   # 404响应缓存1分钟
        proxy_cache_methods GET HEAD;    # 只缓存GET/HEAD请求
        proxy_cache_min_uses 2;          # 至少请求2次后才缓存

        set $do_not_cache 0;          # 初始化变量，避免 "uninitialized variable" 警告
        # 跳过用户相关请求的缓存
        if ($cookie_sessionid) {
            set $do_not_cache 1;
        }
        proxy_cache_bypass $do_not_cache;

        # ========================================

        client_body_buffer_size 128k;
        client_max_body_size 10M;
        client_body_temp_path /var/lib/nginx/body;
        proxy_pass http://127.0.0.1:5000/;
        proxy_http_version 1.1;
        proxy_read_timeout 300s;       # 与 Gunicorn 的 timeout 配置保持一致
        proxy_send_timeout 300s;       # 5分钟超时
        proxy_connect_timeout 75s;
        proxy_redirect off;            # 禁用 Nginx 对后端服务器返回的重定向响应进行修改
        proxy_set_header Connection "";
        proxy_set_header Host $host;   # 传递客户端请求的原始主机名
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    }

    # SSE/WebSocket endpoints need buffering disabled
    location ~ ^/cloudchat/(chat|deepseek_chat|reset_chat|generate_image)$ {
        if ($http_referer !~* ^https://(www\.)?(rendazhang\.com|rendazhang\.github\.io)) {
            return 403;
        }

        limit_req zone=flask_limit burst=10 nodelay;

        client_body_buffer_size 128k;
        client_max_body_size 10M;
        client_body_temp_path /var/lib/nginx/body;
        # strip /cloudchat/ prefix before proxying
        rewrite ^/cloudchat/(.*)$ /$1 break;
        # avoid URI in proxy_pass for regex location
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_buffering off;           # 支持流式传输；关闭后 proxy_cache 将失效
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_redirect off;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    }

    # PDF 专用规则 —— 必须写在最前面，优先级高于 / 和静态资源规则
    location ~* \.pdf$ {
        try_files $uri =404;
        types { application/pdf pdf; }
        expires 7d;
        add_header Cache-Control "public,max-age=604800";
       # proxy_cache will be ignored when serving local files, So no need to set it here
    }

    # HTML / XML / JSON —— 不缓存
    location ~* \.(html?|xml|json)$ {
        add_header Cache-Control "no-cache, must-revalidate";
        add_header Last-Modified $date_gmt;
        try_files $uri =404;
    }

    # 其余静态资源（CSS/JS/图片等）
    location ~* \.(css|js|mjs|woff2?|ttf|eot|otf|gif|jpe?g|png|webp|svg)$ {
        expires 30d;
        add_header Cache-Control "public,max-age=2592000,immutable";
        try_files $uri =404;
    }

    location ~ /package\.json { internal; }
    location ~ /package-lock\.json { internal; }
    location ~ /\.git { internal; }
    location ~ /\.gitignore { internal; }

    error_page   404  /404.html;
    location = /404.html { internal; }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html { internal; }

    # Fallback / 根路径重定向
    location / {
        try_files $uri $uri/ /index.html;
    }


}
