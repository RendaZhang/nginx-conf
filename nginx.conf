# v2025-07-09 – 缓存优化
user nginx; # Nginx 运行用户
worker_processes  auto;
error_log /usr/local/nginx/logs/error.log warn;

pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # ================ 缓存配置 ================
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=dynamic_cache:10m inactive=60m max_size=100m;
    proxy_cache_path /tmp/nginx levels=1:2 keys_zone=static_cache:20m inactive=30d max_size=500m;
    proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_ignore_headers Set-Cookie;  # 防止缓存用户敏感数据
    # ======================================

    # 限流配置：10MB 存储空间，5请求/秒
    limit_req_zone $binary_remote_addr zone=flask_limit:10m rate=5r/s;

    # 优化内存使用
    server_names_hash_bucket_size 64;
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;

    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/rss+xml text/javascript image/svg+xml application/vnd.ms-fontobject application/x-font-ttf font/opentype;
    gzip_min_length 1000;
    gzip_proxied no-cache no-store private expired auth;

    # HTTP Server
    server {
        listen       80 default_server;
        server_name  _;
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen       443 ssl http2;
        server_name  www.rendazhang.com rendazhang.com;

        # ====== ① 站点根路径（所有静态文件基准）======
        root   /usr/local/nginx/RendaZhang;          # ← 绝对路径
        index  index.html index.htm;

        # 安全头
        add_header Strict-Transport-Security "max-age=63072000" always;
        # ===== Content-Security-Policy =====
        add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:; script-src 'self' https://cdn.credly.com https://fonts.googleapis.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src https://www.credly.com; object-src 'self'; media-src 'self'; connect-src 'self';" always;

        # ===== 缓存状态头（调试用）=====
        add_header X-Cache-Status $upstream_cache_status;

        ssl_certificate      cert/www.rendazhang.com.pem;
        ssl_certificate_key  cert/www.rendazhang.com.key;

        ssl_session_timeout  1d;
        ssl_session_cache shared:SSL:10m;

        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384';
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers  on;

        location /cloudchat/ {
            if ($http_referer !~* ^https://(www\.)?(rendazhang\.com|rendazhang\.github\.io)) {
                return 403;
            }

            # zone 需要跟 limit_req_zone 中的名称一致
            limit_req zone=flask_limit burst=10 nodelay;  # 应用限流 - 503

            # ========== 动态内容缓存配置 ==========
            proxy_cache dynamic_cache;
            proxy_cache_valid 200 302 10m;   # 成功响应缓存10分钟
            proxy_cache_valid 404      1m;   # 404响应缓存1分钟
            proxy_cache_methods GET HEAD;    # 只缓存GET/HEAD请求
            proxy_cache_min_uses 2;          # 至少请求2次后才缓存

            # 跳过用户相关请求的缓存
            if ($cookie_sessionid) {
                set $do_not_cache 1;
            }
            proxy_cache_bypass $do_not_cache;

            # ========================================

            client_body_buffer_size 128k;
            client_max_body_size 10M;
            client_body_temp_path /var/nginx/client_temp;
            proxy_pass http://127.0.0.1:5000/;
            proxy_http_version 1.1;
            proxy_buffering off;           # 支持流式传输（对 SSE/WebSocket 友好）
            proxy_read_timeout 300s;       # 与 Gunicorn 的 timeout 配置保持一致
            proxy_send_timeout 300s;       # 5分钟超时
            proxy_connect_timeout 75s;
            proxy_redirect off;            # 禁用 Nginx 对后端服务器返回的重定向响应进行修改
            proxy_set_header Connection "";
            proxy_set_header Host $host;   # 传递客户端请求的原始主机名
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            #  ===== 缓存清理端点 =====
            location ~ /cloudchat/purge-cache(/.*) {
                allow 127.0.0.1;
                deny all;
                proxy_cache_purge dynamic_cache "$scheme$request_method$host$1";
            }
        }

        # PDF 专用规则 —— 必须写在最前面，优先级高于 / 和静态资源规则
        location ~* \.pdf$ {
            try_files $uri =404;
            types { application/pdf pdf; }
            expires 7d;
            add_header Cache-Control "public,max-age=604800";

            # ===== 添加到静态缓存 =====
            proxy_cache static_cache;
            proxy_cache_valid 200 302 30d;
        }

        # HTML / XML / JSON —— 不缓存
        location ~* \.(html?|xml|json)$ {
            add_header Cache-Control "no-cache, must-revalidate";
            add_header Last-Modified $date_gmt;
            try_files $uri =404;
        }

        # 其余静态资源（CSS/JS/图片等）
        location ~* \.(css|js|mjs|woff2?|ttf|eot|otf|gif|jpe?g|png|webp|svg)$ {
            expires 30d;
            add_header Cache-Control "public,max-age=2592000,immutable";
            try_files $uri =404;

            # ===== 添加到静态缓存 =====
            proxy_cache static_cache;
            proxy_cache_valid 200 302 30d;
        }

        location ~ /package\.json { internal; }
        location ~ /package-lock\.json { internal; }
        location ~ /\.git { internal; }
        location ~ /\.gitignore { internal; }

        error_page   404  /404.html;
        location = /404.html { internal; }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html { internal; }

        # Fallback / 根路径重定向
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}
